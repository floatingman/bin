#summary How to compile and configure rTorrent + PyroScope on Debian and other POSIX systems.
#labels installation
<wiki:toc max_depth="2" />

= Introduction =

The following shows installation instructions for a working rTorrent instance in combination with PyroScope *from scratch*, on Debian Server 6.0 (Squeeze). While the package names and the use of `aptitude` are somewhat dependant on (that version of) Debian, the "_Preparatory steps_" commands which are executed under `root` are similar for other distributions, and the compilation instructions should work as-is on practically any Linux and (F)BSD.

  ✪ *If you don't understand a word of what follows, hit [http://static.debian-handbook.info/browse/stable/short-remedial-course.html The Debian Administrator's Handbook] so then you do.*

Non-packaged software is installed exclusively into your normal user account, i.e. this description works OK for non-root users as long as the required packages are installed before-hand. The default install location is `~/lib/rtorrent-«version»`, which means you can easily delete any installed software, and also run several versions concurrently.

For shared multi-user setups, this works fine also — just add a "rtorrent" user or similar, compile and install under it, then provide access to the other users (e.g. by adding them to the "rtorrent" group). Perform the steps from "rTorrent configuration" onwards for each user repeatedly, so they get their own instance. Call "`ln -nfs ~rtorrent/bin/rtorrent ~/bin`" to link to the central software installation (different users can have different versions and flavours active, just by changing the link target).

Most of the command blocks further below can be cut & pasted wholesale into a terminal. Note that `bash` _here documents_ (`... <<'EOF'`) *MUST* be pasted at once, up to and including the line having a single `EOF` on it.

  ⚠ *If you have an existing `/usr/local` installation of rTorrent, it is _very_ prudent to `make uninstall` that before compiling another version. In the same vein, remove any packages of `libtorrent` and `rtorrent` you have on your machine. The build instructions on this page then ensure that it is _no_ problem to have several versions concurrently on your machine.*


= Preparatory steps =
== Installing build dependencies ==
First, you need to install a few *required* packages — *and no, this is not optional in any way*.
These are the only steps that must be performed by the `root` user (i.e. in a root shell, or by writing `sudo` before the actual command):
{{{
aptitude install tmux wget build-essential subversion git \
    python-setuptools python-virtualenv python-dev \
    libsigc++-2.0-dev libssl-dev \
    libncurses-dev libncursesw5-dev locales libcppunit-dev \
    autoconf automake libtool \
    libxml2-dev libxslt1-dev
}}}

Note that you can always show Debian's current build dependencies for rTorrent using the command
{{{
echo $(apt-cache showsrc rtorrent libtorrent-dev | grep Build-Depends: | cut -f2 -d: | tr ",)" " \\n" | cut -f1 -d"(")
}}}


== Optional `root` setup steps ==
If you're security-conscious, you can create a `rtorrent` user and do all the following setup steps under that new account. Doing that ensures that there is _no way_, on a properly maintained ∗nix system, for the build and setup scripts to break either your machine or your normal user account.
{{{
groupadd rtorrent
useradd -g rtorrent -G rtorrent,users -c "rTorrent client" -s /bin/bash --create-home rtorrent
chmod 750 ~rtorrent
su - rtorrent -c "mkdir -p ~/bin"
}}}

In case you later want to use trackers with `https` announce URLs in combination with rTorrent 0.8.6 (higher versions have `network.http.ssl_verify_peer.set=0`), this script is useful to easily add the needed certificates to the system:
{{{
cat >/usr/local/sbin/load-domain-certificate <<'EOF'
#! /bin/bash
if test -z "$1"; then
    echo "usage: $0 <domainname_or_url>"
    exit 1
fi
DOMAINNAME=$(sed -re 's%^(https://)?([^/]+)(.*)$%\2%' <<<$1)
set -x
openssl s_client -connect ${DOMAINNAME}:443 </dev/null | tee /tmp/${DOMAINNAME}.crt
openssl x509 -inform PEM -in /tmp/${DOMAINNAME}.crt -text -out /usr/share/ca-certificates/${DOMAINNAME}.crt
grep ${DOMAINNAME}.crt /etc/ca-certificates.conf >/dev/null || echo ${DOMAINNAME}.crt >>/etc/ca-certificates.conf
update-ca-certificates
ls -l /etc/ssl/certs | grep ${DOMAINNAME}
EOF
chmod a+x /usr/local/sbin/load-domain-certificate
}}}


= rTorrent installation =

== `rtorrent-ps` Debian packages ==

For a limited set of platforms, there are packages available that contain pre-compiled binaries (and only those). You can download and install such a package from [https://bintray.com/pkg/show/general/pyroscope/rtorrent-ps/rtorrent-ps Bintray] — assuming one is available for your platform. It installs the [RtorrentExtended rTorrent-PS] binary including some libraries into `/opt/rtorrent`, the only thing you need to do after installation is to symlink the executable into your path:

{{{
ln -s /opt/rtorrent/bin/rtorrent /usr/local/bin
}}}

Then skip the next section and continue with “rTorrent instance setup”.

 ✪ _During rTorrent instance setup, do not forget to change the value of `pyro.extended` to 1 so the extended features are actually activated!_


== Build `rtorrent` and core dependencies from source ==

Download the [http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/rtorrent-extended/build.sh build script] to a location of your choosing and then call it with the `all` parameter; the script will then download, build, and install all necessary components, storing temporary files in the current directory. You can pass the `clean_all` parameter to remove those temporary files later on, after everything works. Make sure you followed the "Preparatory steps" in the section further up on this page.

*⚠ Be sure to select the version of rTorrent you want to compile, as determined by the settings at the start of the script. If you have no preference otherwise, stick to the stable 0.9.2 release, which is the default.*

{{{
# Run this in your NORMAL user account!
mkdir -p ~/src/; cd ~/src/
svn co http://pyroscope.googlecode.com/svn/trunk/pyrocore/docs/rtorrent-extended
cd rtorrent-extended

# check the VERSION SELECTION at the top of the script, and edit as needed, then...
./build.sh all
}}}

If you want an extended version with some stability fixes and extension patches applied, call this command *in addition*:
{{{
./build.sh extend # "in addition" means AFTER the commands further above
}}}

<table border="0"><tr valign="middle">
<td>http://i.imgur.com/xCd8z.png</td>
<td width="50"></td>
<td align="center">[http://youtu.be/Bv-oajBgsSU http://i.imgur.com/5FPx5.png]<br />rT-PS Demo Video</td>
</tr></table>

Note that the unpatched version is still available as `rtorrent-vanilla`, and you can simply switch by changing the symlink in `~/bin`, or by calling either version with its full path. See RtorrentExtended for more details on the changes applied. 

 ✪ _If you use the configuration as outlined in the next section, do not forget to change the value of `pyro.extended` to 1 in case you built the extended version!_


= rTorrent instance setup =
To be able to use several different instances of rTorrent (e.g. a second one for experimental configuration changes), this setup doesn't use `~/.rtorrent.rc` at all, but keeps everything in one place under the `~/rtorrent` directory. If you change the assignment to `RT_HOME`, you can place it anywhere you like, or create alternate instances with ease.

== rTorrent startup script ==

First, create the instance directories and a simple start script:
{{{
# Run this in your NORMAL user account!
export RT_HOME="${RT_HOME:-$HOME/rtorrent}"
mkdir -p $RT_HOME/{.session,work,done,log,watch/start,watch/load}
cd $RT_HOME

# make simple start script
cat >./start <<'EOF'
#! /bin/bash
if [ "$TERM" = "${TERM%-256color}" ]; then
    export TERM="$TERM-256color"
fi
export LANG=en_US.UTF-8
umask 0027
cd $(dirname $0)
export RT_SOCKET=$PWD/.scgi_local
test -S $RT_SOCKET && lsof $RT_SOCKET >/dev/null && { echo "rTorrent already running"; exit 1; }
test ! -e $RT_SOCKET || rm $RT_SOCKET 

_at_exit() {
    test -z "$TMUX" || tmux set-w automatic-rename on >/dev/null
    stty sane
    test ! -e $RT_SOCKET || rm $RT_SOCKET
}
trap _at_exit INT TERM EXIT
test -z "$TMUX" || tmux rename-w rT-PS

rtorrent -n -o import=$PWD/rtorrent.rc
EOF
chmod a+x ./start
}}}

== rTorrent configuration ==

Next, a not-so-simple `rtorrent.rc` is created, it already contains everything needed to use all features of PyroScope — you should check at least the first section and adapt the values to your environment. Note that most of the settings specific to PyroScope are read from a [http://pyroscope.googlecode.com/svn/trunk/pyrocore/src/pyrocore/data/config/rtorrent-0.8.6.rc provided include file].

{{{
# Run this in your NORMAL user account!
export RT_HOME="${RT_HOME:-$HOME/rtorrent}"
sed -e "s:RT_HOME:$RT_HOME:" >$RT_HOME/rtorrent.rc <<'EOF'
### rtorrent settings #######################################################

#
# OPTIONAL settings (check these)
#

# general
upload_rate = 12000
download_rate = 12000
max_uploads = 100
max_uploads_global = 250
tracker_numwant = 80
max_open_http = 99
max_open_files = 600
max_open_sockets = 300
encryption = allow_incoming,try_outgoing,enable_retry
umask = 0027
key_layout = qwertz
check_hash = no

# rTorrent 0.8.9 and older only
# default is 2 ms and 5 tries
#hash_interval = 50
#hash_max_tries = 2

# range for listening port
port_range = 64000-64042
port_random = no

# tracker-less torrent support
dht = disable
peer_exchange = no
use_udp_trackers = no

# peer settings
min_peers = 20
max_peers = 60
min_peers_seed = 30
max_peers_seed = 80

# resource usage
max_memory_usage = 1800M
xmlrpc_size_limit = 2M


#
# CORE settings (keep these)
#
http_capath = /etc/ssl/certs
encoding_list = utf8

directory = RT_HOME/work
session = RT_HOME/.session
scgi_local = RT_HOME/.scgi_local
##scgi_port = localhost:5099
log.execute = RT_HOME/log/execute.log

# SCHEDULE: Make SCGI socket group-writable
schedule = scgi_permission,0,0,"execute_nothrow=chmod,g+w,RT_HOME/.scgi_local"

# SCHEDULE: Watch directories (if you use "pyrotorque", you can/should comment out the watches)
schedule = watch_start_directory,10,10,load_start=RT_HOME/watch/start/*.torrent
schedule = watch_load_directory,15,20,load=RT_HOME/watch/load/*.torrent

# SCHEDULE: Watch disk space
schedule = low_diskspace,15,60,close_low_diskspace=1000M

# EVENTS: Logging (don't log "opened", or you get swamped at startup)
system.method.set_key = event.download.inserted_new,log,"print=\"LOADED \",$d.get_name=,\" [\",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.finished,log,"print=\"COMPLETED \",$d.get_name=,\" [R=\",$d.get_ratio=,\", \",$to_date=$system.time=,\"]\""
system.method.set_key = event.download.closed,log,"print=\"CLOSED \",$d.get_name=,\" [R=\",$d.get_ratio=,\", \",$to_date=$system.time=,\"]\""

# UI/VIEW: Sort "seeding" by ratio
view_sort_current = seeding,greater=d.get_ratio= 


#
# PyroScope SETTINGS
#

# Set "pyro.extended" to 1 to activate rTorrent-PS features!
system.method.insert = pyro.extended, value|const, 0

# Set "pyro.bin_dir" to the "bin" directory where you installed the pyrocore tools!
# Make sure you end it with a "/"; if this is left empty, then the shell's path is searched.
system.method.insert = pyro.bin_dir, string|const, ~/bin/

# Remove the ".default" if you want to change something (else your 
# changes get over-written on update).
system.method.insert = pyro.rc_dialect, string|const|simple, "execute_capture=bash,-c,\"test $1 = 0.8.6 && echo -n 0.8.6 || echo -n 0.8.9\",dialect,$system.client_version="
system.method.insert = pyro.rtorrent_rc, string|const|private, "$cat=~/.pyroscope/rtorrent-,\"$pyro.rc_dialect=\",.rc.default"
import = $pyro.rtorrent_rc=

# TORQUE: Daemon watchdog schedule
# Must be activated by touching the "~/.pyroscope/run/pyrotorque" file!
# Set the second argument to "-v" or "-q" to change log verbosity.
schedule = pyro_watchdog,30,300,"pyro.watchdog=~/.pyroscope,"

# CURL options
branch=pyro.extended=,"network.http.ssl_verify_peer.set=0"
branch=pyro.extended=,"network.http.dns_cache_timeout.set=25"

# The following view changes rely on additional fields available with PyroScope added,
# but are a matter of preference, so you may comment them out

# UI/VIEW: Sort incomplete by date added
view_sort_current = incomplete,greater=d.get_custom=tm_loaded
view_sort_new     = incomplete,greater=d.get_custom=tm_loaded

# UI/VIEW: Show recently completed top-most in "main"
view_sort_current = main,greater=d.get_custom=tm_completed
view_filter_on = main,event.download.finished

# UI/VIEW: Show active and incomplete torrents (in view #0) and update every 20 seconds
#   Items are grouped into complete, incomplete, and queued, in that order (rT-PS only).
#   Within each group, they're sorted by download and then upload speed.
branch=pyro.extended=,false=,"view_sort_current = active,greater=d.get_up_rate="
branch=pyro.extended=,"view_sort_current = active,\"compare=----,d.is_open=,d.get_complete=,d.get_down_rate=,d.get_up_rate=\""
schedule = filter_active,12,20,"view_filter = active,\"or={d.get_up_rate=,d.get_down_rate=,not=$d.get_complete=}\" ;view_sort=active"


#
# LOCAL settings
#

# Add anything of your own here...

### END rtorrent.rc #########################################################
EOF
}}}


= !PyroScope installation =
The installation of `pyrocore` is done from source, see InstallFromSource for more details.
{{{
# Run this in your NORMAL user account!
mkdir -p ~/bin ~/lib
svn checkout http://pyroscope.googlecode.com/svn/trunk/ ~/lib/pyroscope
~/lib/pyroscope/update-to-head.sh
}}}

Make sure `~/bin` is on your `PATH`, and if not, close and then reopen your shell. Check again, and if it's still not in there, [http://linux.about.com/od/linux101/l/blnewbie3_1_4.htm fix your broken `.bashrc`].

<font face="Impact,Verdana,sans" color="#f22" size="4">Also, if you compiled rTorrent version *0.9.2* (which is the default) or *0.8.9*, you *MUST [RtXmlRpcMigration run the migration script]* on the configuration now!</font>
{{{
# Run this in your NORMAL user account!
export RT_HOME="${RT_HOME:-$HOME/rtorrent}"
~/lib/pyroscope/pyrocore/docs/rtorrent-extended/migrate_rtorrent_rc.sh $RT_HOME/rtorrent.rc
}}}
That converts it from the old 0.8.6 syntax to the new one.


= !PyroScope configuration =
This adds a minimal configuration, so that the defaults are taken from the installed software, which makes later updates a lot easier.
{{{
# Run this in your NORMAL user account!
pyroadmin --create-config

cat >~/.pyroscope/config.ini <<EOF
# PyroScope configuration file
#
# For details, see http://code.google.com/p/pyroscope/wiki/UserConfiguration
#

[GLOBAL]
# Location of your rtorrent configuration
rtorrent_rc = ~/rtorrent/rtorrent.rc

[ANNOUNCE]
# Add alias names for announce URLs to this section; those aliases are used
# at many places, e.g. by the "mktor" tool and to shorten URLs to these aliases
EOF
}}}


= First start and testing =

== tmux Configuration ==

We spruce up `tmux` a bit before we start it the first time, and make it more homey for long-time `screen` users:
{{{
# Run this in your NORMAL user account!
cat >~/.tmux.conf <<'EOF'
# Rebind to Ctrl-a
set -g prefix C-a
unbind C-b
bind a send-prefix
bind C-a last-window
bind '"' choose-window

# Rebind pane splitting
unbind %
bind - split-window -v
bind _ split-window -h

# Set status bar
set -g status-bg colour236
set -g status-fg white
set -g status-left '#[fg=green]#H'

# Highlight active window
set-window-option -g window-status-current-bg colour164
EOF
}}}

== Starting a tmux Session ==

You're now ready to start your rTorrent, so just do it:
{{{
# Run this in your NORMAL user account!
tmux -2u new -n rT-PS -s rtorrent "~/rtorrent/start; exec bash"
}}}
The `exec bash` keeps your `tmux` window open if rTorrent exits, which allows you to actually read any error messages in case rTorrent ends _unexpectedly_.

You can of course add more elaborate start scripts, like a cron watchdog or init.d scripts, see the rTorrent wiki for examples.
After that, test the XMLRPC connection by using this command:
{{{
# Open a new tmux terminal window by pressing "Ctrl-a" and then "c"
rtxmlrpc system.time_usec
}}}

Continue by reading the UserConfiguration and the RtControlExamples pages.